/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */ 
import javax.swing.ImageIcon;
import java.awt.Image;
import javax.swing.SwingConstants;
import java.util.Random;
import java.util.ArrayList;
import javax.swing.Timer;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import javax.swing.Icon;
import java.io.File;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 *
 * @author umair
 */
public class FlipFlopGame extends javax.swing.JFrame {

    public <T> void print(T argument) {
        System.out.println("" + argument);
    }
    /**
     * Creates new form FlipFlopGame
     */
    public FlipFlopGame() {
        initComponents();
        initDisplay();
        disableButtons();
        tilesShown = 0;
        board = new String[4][4];
        displayedTilesPath = new String[2];
        displayedTiles = new javax.swing.JButton[2];
        username = "";
        highscores = new int[10];
        names = new String[10];
        readLeaderBoard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        play = new javax.swing.JButton();
        Leaderboard = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        T12 = new javax.swing.JButton();
        T13 = new javax.swing.JButton();
        T11 = new javax.swing.JButton();
        T14 = new javax.swing.JButton();
        T22 = new javax.swing.JButton();
        T23 = new javax.swing.JButton();
        T21 = new javax.swing.JButton();
        T24 = new javax.swing.JButton();
        T34 = new javax.swing.JButton();
        T32 = new javax.swing.JButton();
        T33 = new javax.swing.JButton();
        T31 = new javax.swing.JButton();
        T41 = new javax.swing.JButton();
        T44 = new javax.swing.JButton();
        T42 = new javax.swing.JButton();
        T43 = new javax.swing.JButton();
        Score = new javax.swing.JLabel();
        welcomeLabel = new javax.swing.JLabel();
        UserHistory = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        play.setText("Play / Restart");
        play.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        Leaderboard.setText("Leaderboard");
        Leaderboard.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Leaderboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeaderboardActionPerformed(evt);
            }
        });

        progressBar.setMaximum(80);
        progressBar.setAutoscrolls(true);

        T12.setText("T12");
        T12.setFocusable(false);
        T12.setMargin(new java.awt.Insets(2, 26, 2, 14));
        T12.setMaximumSize(new java.awt.Dimension(32, 10));
        T12.setPreferredSize(new java.awt.Dimension(36, 22));
        T12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T12ActionPerformed(evt);
            }
        });

        T13.setText("T13");
        T13.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T13ActionPerformed(evt);
            }
        });

        T11.setText("T11");
        T11.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                T11MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                T11MouseExited(evt);
            }
        });
        T11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T11ActionPerformed(evt);
            }
        });

        T14.setText("T14");
        T14.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T14ActionPerformed(evt);
            }
        });

        T22.setText("T22");
        T22.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T22ActionPerformed(evt);
            }
        });

        T23.setText("T23");
        T23.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T23ActionPerformed(evt);
            }
        });

        T21.setText("T21");
        T21.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T21ActionPerformed(evt);
            }
        });

        T24.setText("T24");
        T24.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T24ActionPerformed(evt);
            }
        });

        T34.setText("T34");
        T34.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T34ActionPerformed(evt);
            }
        });

        T32.setText("T32");
        T32.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T32ActionPerformed(evt);
            }
        });

        T33.setText("T33");
        T33.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T33ActionPerformed(evt);
            }
        });

        T31.setText("T31");
        T31.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T31ActionPerformed(evt);
            }
        });

        T41.setText("T41");
        T41.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T41ActionPerformed(evt);
            }
        });

        T44.setText("T44");
        T44.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T44.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T44ActionPerformed(evt);
            }
        });

        T42.setText("T42");
        T42.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T42ActionPerformed(evt);
            }
        });

        T43.setText("T43");
        T43.setMargin(new java.awt.Insets(2, 26, 3, 14));
        T43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T43ActionPerformed(evt);
            }
        });

        Score.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Score.setText("Score: 0");

        welcomeLabel.setFont(new java.awt.Font("Monospaced", 1, 36)); // NOI18N
        welcomeLabel.setText("Welcome -");
        welcomeLabel.setMaximumSize(new java.awt.Dimension(100, 100));
        welcomeLabel.setMinimumSize(new java.awt.Dimension(50, 50));

        UserHistory.setText("User History");
        UserHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(T21, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T22, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T23, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T24, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(T31, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T32, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T33, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T34, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(T41, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T42, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T43, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T44, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(T11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(T14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(Leaderboard)
                        .addGap(170, 170, 170)
                        .addComponent(UserHistory)))
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(play)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(Score)))
                .addGap(206, 206, 206))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(play)
                    .addComponent(Leaderboard)
                    .addComponent(UserHistory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Score, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T22, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T23, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T21, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T24, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T32, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T33, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T31, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T34, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T42, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T43, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T41, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T44, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void readLeaderBoard()
    {
        try {
            Scanner scanner = new Scanner(new File(".\\Leaderboard.txt"));
            int i = 0;
            while (scanner.hasNextLine()) {
                String[] parts = scanner.nextLine().split(" ");
                names[i] = parts[0];
                highscores[i] = Integer.parseInt(parts[1]);
                i++;
            }
            scanner.close();
        } catch (Exception e) {
            System.out.println("Leaderboard File not found.");
            e.printStackTrace();
        }
    }
    
    private void initDisplay()
    {
        String path = ".\\bhai\\blankTile.png";
        this.setImageToTile(T11, path, true);
        this.setImageToTile(T12, path, true);
        this.setImageToTile(T13, path, true);
        this.setImageToTile(T14, path, true);
        
        this.setImageToTile(T21, path, true);
        this.setImageToTile(T22, path, true);
        this.setImageToTile(T23, path, true);
        this.setImageToTile(T24, path, true);
        
        this.setImageToTile(T31, path, true);
        this.setImageToTile(T32, path, true);
        this.setImageToTile(T33, path, true);
        this.setImageToTile(T34, path, true);
     
        this.setImageToTile(T41, path, true);
        this.setImageToTile(T42, path, true);
        this.setImageToTile(T43, path, true);
        this.setImageToTile(T44, path, true);
    }
    
    private void disableButtons()
    {
        T11.setEnabled(false);
        T12.setEnabled(false);
        T13.setEnabled(false);
        T14.setEnabled(false);
        
        T21.setEnabled(false);
        T22.setEnabled(false);
        T23.setEnabled(false);
        T24.setEnabled(false);
        
        T31.setEnabled(false);
        T32.setEnabled(false);
        T33.setEnabled(false);
        T34.setEnabled(false);
        
        T41.setEnabled(false);
        T42.setEnabled(false);
        T43.setEnabled(false);
        T44.setEnabled(false);
        
    }
    
    private void setImageToTile(javax.swing.JButton T, String path, boolean blank)
    {
        ImageIcon icon = new ImageIcon(path);
        Image originalImage = icon.getImage();
        int desiredWidth = T.getWidth();
        int desiredHeight = T.getHeight();
        if(blank)
        {
            desiredWidth += 10;
        }
        else
        {
            desiredWidth -= 10;
            desiredHeight -= 15;
        }
        Image resizedImage = originalImage.getScaledInstance(desiredWidth, desiredHeight, Image.SCALE_SMOOTH);
        icon = new ImageIcon(resizedImage);
        T.setIcon(icon);
        T.setHorizontalAlignment(SwingConstants.CENTER);
        T.setVerticalAlignment(SwingConstants.CENTER);
        T.setEnabled(true);
    }
    
    private void showAllTiles()
    {
        setImageToTile(T11, board[0][0], false);
        setImageToTile(T12, board[0][1], false);
        setImageToTile(T13, board[0][2], false);
        setImageToTile(T14, board[0][3], false);

        setImageToTile(T21, board[1][0], false);
        setImageToTile(T22, board[1][1], false);
        setImageToTile(T23, board[1][2], false);
        setImageToTile(T24, board[1][3], false);

        setImageToTile(T31, board[2][0], false);
        setImageToTile(T32, board[2][1], false);
        setImageToTile(T33, board[2][2], false);
        setImageToTile(T34, board[2][3], false);

        setImageToTile(T41, board[3][0], false);
        setImageToTile(T42, board[3][1], false);
        setImageToTile(T43, board[3][2], false);
        setImageToTile(T44, board[3][3], false);
    }
    
    private void getUserName()
    {
        while(this.username == null || this.username.equals("") || this.username.length() > 10)
        {
            this.username = JOptionPane.showInputDialog(this, "Enter your name:", "Input Name", JOptionPane.PLAIN_MESSAGE);
            if(this.username.length() > 10)
                JOptionPane.showMessageDialog(this, "Name too long", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        
        welcomeLabel.setText("Welcome " + username);
    }
    
    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        ArrayList<String> paths = new ArrayList<>();
        
        paths.add(".\\bhai\\cloudy.png");
        paths.add(".\\bhai\\Cone.png");
        paths.add(".\\bhai\\Cross.png");
        paths.add(".\\bhai\\Diamond.png");
        paths.add(".\\bhai\\cloudy.png");
        paths.add(".\\bhai\\Cross.png");
        paths.add(".\\bhai\\penguin.png");
        paths.add(".\\bhai\\Cone.png");
        paths.add(".\\bhai\\strawberry.png");
        paths.add(".\\bhai\\Square.png");
        paths.add(".\\bhai\\Diamond.png");
        paths.add(".\\bhai\\tulips.png");
        paths.add(".\\bhai\\strawberry.png");
        paths.add(".\\bhai\\penguin.png");
        paths.add(".\\bhai\\tulips.png");
        paths.add(".\\bhai\\Square.png");
    
        Random random = new Random();
        int idx;
        isStart = false;
        progressBar.setValue(0);
        this.tilesShown = 0;
        score = 0;
        pairsGuessed = 0;
        
        getUserName();
        Score.setText("Score: " + score);
        for(int i=0; i<4; i++)
        {
            for(int j=0; j<4; j++)
            {
                idx = Math.abs(random.nextInt()) % paths.size();
                board[i][j] = paths.get(idx);
                paths.remove(idx);
            }
        }

        this.showAllTiles();
        // Create a timer with a delay of 2 seconds (2000 milliseconds)
        
        timer = new Timer(2000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Reset all the tiles
                initDisplay();
                timer.stop(); // Stop the timer after 2 seconds
                isStart = true;
            }
        });

        timer.setRepeats(false); // Set the timer to execute only once
        timer.start(); // Start the timer
    }//GEN-LAST:event_playActionPerformed

    private void T11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T11ActionPerformed
        this.move(T11, board[0][0]);
    }//GEN-LAST:event_T11ActionPerformed

    private void T12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T12ActionPerformed
        this.move(T12, board[0][1]);
    }//GEN-LAST:event_T12ActionPerformed

    private void T13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T13ActionPerformed
        this.move(T13, board[0][2]);
    }//GEN-LAST:event_T13ActionPerformed

    private void T14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T14ActionPerformed
        this.move(T14, board[0][3]);
    }//GEN-LAST:event_T14ActionPerformed

    private void T21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T21ActionPerformed
        this.move(T21, board[1][0]);
    }//GEN-LAST:event_T21ActionPerformed

    private void T22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T22ActionPerformed
        this.move(T22, board[1][1]);
    }//GEN-LAST:event_T22ActionPerformed

    private void T23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T23ActionPerformed
        this.move(T23, board[1][2]);
    }//GEN-LAST:event_T23ActionPerformed

    private void T24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T24ActionPerformed
        this.move(T24, board[1][3]);
    }//GEN-LAST:event_T24ActionPerformed

    private void T31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T31ActionPerformed
        this.move(T31, board[2][0]);
    }//GEN-LAST:event_T31ActionPerformed

    private void T32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T32ActionPerformed
        this.move(T32, board[2][1]);
    }//GEN-LAST:event_T32ActionPerformed

    private void T33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T33ActionPerformed
        this.move(T33, board[2][2]);
    }//GEN-LAST:event_T33ActionPerformed

    private void T34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T34ActionPerformed
        this.move(T34, board[2][3]);
    }//GEN-LAST:event_T34ActionPerformed

    private void T41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T41ActionPerformed
        this.move(T41, board[3][0]);
    }//GEN-LAST:event_T41ActionPerformed

    private void T42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T42ActionPerformed
        this.move(T42, board[3][1]);
    }//GEN-LAST:event_T42ActionPerformed

    private void T43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T43ActionPerformed
        this.move(T43, board[3][2]);
    }//GEN-LAST:event_T43ActionPerformed

    private void T44ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T44ActionPerformed
        this.move(T44, board[3][3]);
    }//GEN-LAST:event_T44ActionPerformed

    private void T11MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_T11MouseEntered
        
    }//GEN-LAST:event_T11MouseEntered

    private void T11MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_T11MouseExited
        
    }//GEN-LAST:event_T11MouseExited

    private void LeaderboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeaderboardActionPerformed
        LeaderboardTable table = new LeaderboardTable();
        table.setLeaderboard(names, highscores);
        table.setVisible(true);
    }//GEN-LAST:event_LeaderboardActionPerformed

    private void UserHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserHistoryActionPerformed
        getUserName();
        
        try{
            Connection conn = DriverManager.getConnection("jdbc:ucanaccess://.\\FlipFlopHistory.accdb");
            String sql = "SELECT * FROM FlipFlopHistory WHERE Username = ?";
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setString(1, username); // Set the username parameter value

            // Execute the query
            ResultSet rs = statement.executeQuery();

            if (rs.next()) {
                // Access the columns of the retrieved rows
                int id = rs.getInt("ID");
                int played = rs.getInt("GamesPlayed");
                int maxScore = rs.getInt("MaximumScore");
                int minScore = rs.getInt("MinimumScore");

                String message = "Name: " + username + "\n";
                message += "Games Played: " + played + "\n";
                message += "Maximum Score: " + maxScore + "\n";
                message += "Minimum Score: " + minScore + "\n";
                Icon customIcon = new ImageIcon((new ImageIcon(".\\bhai\\brain.png")).getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH));
                JOptionPane.showMessageDialog(this, message, "User History", JOptionPane.INFORMATION_MESSAGE, customIcon);
            } else {
                updateDatabase(false);
            }

            // Close the resources
            rs.close();
            statement.close();
            conn.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_UserHistoryActionPerformed

    private void move(javax.swing.JButton T, String path)
    {
        if(this.tilesShown == 2 || !this.isStart)
            return;
        
        if(this.tilesShown == 1 && this.displayedTiles[0] == T)
            return;
        
        this.setImageToTile(T, path, false);
        this.displayedTilesPath[this.tilesShown] = path;
        this.displayedTiles[this.tilesShown] = T;
        
        this.tilesShown++;
        
        if(this.tilesShown == 2)
        {
            isStart = false;
            if(this.displayedTilesPath[0].equals(this.displayedTilesPath[1]))
            {
                displayedTiles[0].setEnabled(false);
                displayedTiles[1].setEnabled(false);
                progressBar.setValue(progressBar.getValue() + 10);
                isStart = true;
                score += 50;
                pairsGuessed++;
            }
            else
            {
                timer = new Timer(1000, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        // Reset all the tiles
                        setImageToTile(displayedTiles[0], ".\\bhai\\blankTile.png", true);
                        setImageToTile(displayedTiles[1], ".\\bhai\\blankTile.png",true);
                        timer.stop(); // Stop the timer after 2 seconds
                        isStart = true;
                    }
                });

                timer.setRepeats(false); // Set the timer to execute only once
                timer.start(); // Start the timer
                
                if(score > 20)
                        score -= 20;
                else
                    score = 0;
            }
            
            this.tilesShown = 0;
        }
        Score.setText("Score: " + score);
        
        if(this.pairsGuessed == 8)
        {
            gameOver();
        }
    }
    
    private void gameOver()
    {
        int pos = -1, idx;
        updateDatabase(true);
        
        for(idx = 0; idx < highscores.length; idx++)
        {
            if( this.highscores[idx] < score){
                pos = idx + 1;
                break;
            }
        }
        
        String message = "Congratulations! You Won\nYour Score is " + String.valueOf(score);
        if(pos != -1)
        {
            message += "\nYou are ranked #" + String.valueOf(pos) + " in Leaderboard";
            for(int i=8; i>=idx; i--)
            {
                this.highscores[i+1] = this.highscores[i];
                this.names[i+1] = this.names[i];
            }
            
            this.highscores[idx] = score;
            this.names[idx] = username;
            
            writeLeaderboard();
        }
        Icon customIcon = new ImageIcon((new ImageIcon(".\\bhai\\trophy.png")).getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH));
        JOptionPane.showMessageDialog(this, message, "Victory", JOptionPane.INFORMATION_MESSAGE, customIcon);
    }
    
    private void updateDatabase(boolean isPlayed)
    {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = DriverManager.getConnection("jdbc:ucanaccess://.\\FlipFlopHistory.accdb");
            String selectSql = "SELECT * FROM FlipFlopHistory WHERE Username = ?";
            stmt = conn.prepareStatement(selectSql);
            stmt.setString(1, username); // Set the username parameter value

            // Execute the query
            rs = stmt.executeQuery();

            if (rs.next()) {
                // Username exists in the database, increment GamesPlayed
                int id = rs.getInt("ID");
                int played = rs.getInt("GamesPlayed");
                int maxScore = rs.getInt("MaximumScore");
                int minScore = rs.getInt("MinimumScore");
                
                played++;
                
                if(score != 0)
                {
                    if(score < minScore)
                        minScore = score;
                    else if(score > maxScore)
                        maxScore = score;
                }
                
                String updateSql = "UPDATE FlipFlopHistory SET GamesPlayed = ?, MaximumScore = ?, MinimumScore = ? WHERE ID = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateSql);
                updateStmt.setInt(1, played);
                updateStmt.setInt(2, maxScore);
                updateStmt.setInt(3, minScore);
                updateStmt.setInt(4, id);

                // Execute the update statement
                updateStmt.executeUpdate();
            } else {
                // Username does not exist, add the user to the database
                int played = 0;
                int maxScore = 0;
                int minScore = 0;
                if(isPlayed)
                {
                    played = 1;
                    maxScore = score;
                    minScore = score;
                }
                
                String insertSql = "INSERT INTO FlipFlopHistory (Username, GamesPlayed, MaximumScore, MinimumScore) VALUES (?, ?, ?, ?)";
                PreparedStatement insertStmt = conn.prepareStatement(insertSql);
                insertStmt.setString(1, username); // Set the username parameter value
                insertStmt.setInt(2, played); // Set GamesPlayed to 0
                insertStmt.setInt(3, maxScore); // Set GamesPlayed to 0
                insertStmt.setInt(4, minScore); // Set GamesPlayed to 0

                // Execute the insert statement
                insertStmt.executeUpdate();
            }
            
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void writeLeaderboard()
    {
        try{
            FileWriter writer = new FileWriter(".\\Leaderboard.txt");
            for(int i=0; i<10; i++)
                writer.write(names[i] + " " + String.valueOf(highscores[i]) + "\n");
            
            writer.close();
        } catch (Exception e) {
            System.out.println("Leaderboard File not found.");
            e.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlipFlopGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlipFlopGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlipFlopGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlipFlopGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlipFlopGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Leaderboard;
    private javax.swing.JLabel Score;
    private javax.swing.JButton T11;
    private javax.swing.JButton T12;
    private javax.swing.JButton T13;
    private javax.swing.JButton T14;
    private javax.swing.JButton T21;
    private javax.swing.JButton T22;
    private javax.swing.JButton T23;
    private javax.swing.JButton T24;
    private javax.swing.JButton T31;
    private javax.swing.JButton T32;
    private javax.swing.JButton T33;
    private javax.swing.JButton T34;
    private javax.swing.JButton T41;
    private javax.swing.JButton T42;
    private javax.swing.JButton T43;
    private javax.swing.JButton T44;
    private javax.swing.JButton UserHistory;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JButton play;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
    String[][] board;
    private Timer timer;
    int tilesShown;
    String[] displayedTilesPath;
    javax.swing.JButton[] displayedTiles;
    boolean isStart;
    int score;
    int pairsGuessed;
    String username;
    String[] names;
    int[] highscores;
}
